// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectChronos.DB;

#nullable disable

namespace ProjectChronos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231122210658_InitialGameSystem")]
    partial class InitialGameSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardPackRewardTemplateCardPackTemplate", b =>
                {
                    b.Property<int>("CardPackTemplatesId")
                        .HasColumnType("int");

                    b.Property<int>("RewardTemplatesId")
                        .HasColumnType("int");

                    b.HasKey("CardPackTemplatesId", "RewardTemplatesId");

                    b.HasIndex("RewardTemplatesId");

                    b.ToTable("CardPackRewardTemplateCardPackTemplate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.CardPackRewardTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityPerReward")
                        .HasColumnType("int");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<int>("TotalRewards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CardPackRewardTemplates");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.CardPackTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RewardsPerPack")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CardPackTemplates");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.CreatedPacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardPackTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRemaining")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardPackTemplateId");

                    b.ToTable("CreatedPacks");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.DeckCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserDeckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDeckId");

                    b.ToTable("DeckCards");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchDrawnCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("MatchDrawTurnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchDrawTurnId");

                    b.ToTable("MatchDrawnCard");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpponentId")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("SystemVersion")
                        .HasColumnType("int");

                    b.Property<int>("UserDeckSnapshotId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserDeckSnapshotId");

                    b.ToTable("MatchInstance");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchTurn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsUserTurn")
                        .HasColumnType("bit");

                    b.Property<int>("MatchInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchInstanceId");

                    b.ToTable("MatchTurn");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MatchTurn");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.Opponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpponentDeckId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpponentDeckId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Opponents");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.UserDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDecks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserDeck");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProjectChronos.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UserOpponent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OpponentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OpponentId");

                    b.HasIndex("OpponentId");

                    b.ToTable("UserOpponent");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchAttackTurn", b =>
                {
                    b.HasBaseType("ProjectChronos.Common.Entities.MatchTurn");

                    b.Property<int>("AttackCardId")
                        .HasColumnType("int");

                    b.Property<int>("TargetCardId")
                        .HasColumnType("int");

                    b.HasIndex("AttackCardId");

                    b.HasIndex("TargetCardId");

                    b.HasDiscriminator().HasValue("MatchAttackTurn");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchDrawTurn", b =>
                {
                    b.HasBaseType("ProjectChronos.Common.Entities.MatchTurn");

                    b.HasDiscriminator().HasValue("MatchDrawTurn");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.OpponentDeck", b =>
                {
                    b.HasBaseType("ProjectChronos.Common.Entities.UserDeck");

                    b.ToTable("UserDecks");

                    b.HasDiscriminator().HasValue("OpponentDeck");
                });

            modelBuilder.Entity("CardPackRewardTemplateCardPackTemplate", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.CardPackTemplate", null)
                        .WithMany()
                        .HasForeignKey("CardPackTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectChronos.Common.Entities.CardPackRewardTemplate", null)
                        .WithMany()
                        .HasForeignKey("RewardTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectChronos.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectChronos.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectChronos.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectChronos.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.CreatedPacks", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.CardPackTemplate", "CardPackTemplate")
                        .WithMany("CreatedPacks")
                        .HasForeignKey("CardPackTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardPackTemplate");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.DeckCard", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.UserDeck", "UserDeck")
                        .WithMany("DeckCards")
                        .HasForeignKey("UserDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDeck");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchDrawnCard", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.MatchDrawTurn", "MatchDrawTurn")
                        .WithMany("Cards")
                        .HasForeignKey("MatchDrawTurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchDrawTurn");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchInstance", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.UserDeck", "UserDeckSnapshot")
                        .WithMany()
                        .HasForeignKey("UserDeckSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDeckSnapshot");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchTurn", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.MatchInstance", "MatchInstance")
                        .WithMany("Turns")
                        .HasForeignKey("MatchInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchInstance");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.Opponent", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.OpponentDeck", "OpponentDeck")
                        .WithOne("Opponent")
                        .HasForeignKey("ProjectChronos.Common.Entities.Opponent", "OpponentDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectChronos.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("OpponentDeck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.UserDeck", b =>
                {
                    b.HasOne("ProjectChronos.Entities.User", "User")
                        .WithMany("UserDecks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserOpponent", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.Opponent", null)
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectChronos.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchAttackTurn", b =>
                {
                    b.HasOne("ProjectChronos.Common.Entities.MatchDrawnCard", "AttackCard")
                        .WithMany()
                        .HasForeignKey("AttackCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectChronos.Common.Entities.MatchDrawnCard", "TargetCard")
                        .WithMany()
                        .HasForeignKey("TargetCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttackCard");

                    b.Navigation("TargetCard");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.CardPackTemplate", b =>
                {
                    b.Navigation("CreatedPacks");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchInstance", b =>
                {
                    b.Navigation("Turns");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.UserDeck", b =>
                {
                    b.Navigation("DeckCards");
                });

            modelBuilder.Entity("ProjectChronos.Entities.User", b =>
                {
                    b.Navigation("UserDecks");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.MatchDrawTurn", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ProjectChronos.Common.Entities.OpponentDeck", b =>
                {
                    b.Navigation("Opponent")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
